<?xml version="1.0" encoding="UTF-8"?>
<model version="4.4.0" links="0">
 <documentation>This is the PEdestrian LIght CONtrolled (PELICAN) crossing example for the Arduino-UNO board.  The example demonstrates:

1. One active object class &quot;Pelican&quot; (inside the package &quot;AOs&quot;)
2. A non-trivial Hierarchical State Machine (HSM)
3. The concept of a Board Support Pakage (BSP)</documentation>
 <framework name="qpn"/>
 <package name="AOs" stereotype="0x02">
  <class name="Pelican" superclass="qpn::QActive">
   <documentation>PEdestrian LIght CONtrolled (PELICAN) crossing</documentation>
   <attribute name="flashCtr" type="uint8_t" visibility="0x02" properties="0x00"/>
   <statechart>
    <initial target="../1">
     <initial_glyph conn="2,2,5,1,72,3,-2">
      <action box="1,-2,27,4"/>
     </initial_glyph>
    </initial>
    <state name="operational">
     <entry brief="CARS_RED; PEDS_DONT_WALK">BSP_signalCars(CARS_RED);
BSP_signalPeds(PEDS_DONT_WALK);</entry>
     <initial target="../2">
      <initial_glyph conn="4,9,5,1,33,7,-2">
       <action box="1,-2,6,2"/>
      </initial_glyph>
     </initial>
     <tran trig="OFF" target="../../2">
      <tran_glyph conn="2,12,3,1,72,66,-2">
       <action box="0,-2,5,2"/>
      </tran_glyph>
     </tran>
     <state name="carsEnabled">
      <exit brief="CARS_RED">BSP_signalCars(CARS_RED);</exit>
      <initial target="../1">
       <initial_glyph conn="5,19,5,1,26,4,-2">
        <action box="1,-2,6,2"/>
       </initial_glyph>
      </initial>
      <state name="carsGreen">
       <entry brief="CARS_GREEN">BSP_signalCars(CARS_GREEN);
/* one-shot timeout in CARS_GREEN_MIN_TOUT ticks */
QActive_armX(&amp;me-&gt;super, 0U, CARS_GREEN_MIN_TOUT, 0U);</entry>
       <exit>QActive_disarmX(&amp;me-&gt;super, 0U);</exit>
       <initial target="../1">
        <initial_glyph conn="7,29,5,1,17,3,-2">
         <action box="0,-2,6,2"/>
        </initial_glyph>
       </initial>
       <state name="carsGreenNoPed">
        <entry>BSP_showState(&quot;carsGreenNoPed&quot;);</entry>
        <tran trig="PEDS_WAITING" target="../../3">
         <tran_glyph conn="8,36,3,1,19,15,-5">
          <action box="0,-2,11,2"/>
         </tran_glyph>
        </tran>
        <tran trig="Q_TIMEOUT" target="../../2">
         <tran_glyph conn="8,39,3,1,17,4,-3">
          <action box="0,-2,10,2"/>
         </tran_glyph>
        </tran>
        <state_glyph node="8,30,14,10">
         <entry box="1,2,5,2"/>
        </state_glyph>
       </state>
       <state name="carsGreenInt">
        <entry>BSP_showState(&quot;carsGreenInt&quot;);</entry>
        <tran trig="PEDS_WAITING" target="../../../2">
         <tran_glyph conn="8,47,3,1,25,19,-4">
          <action box="0,-2,11,2"/>
         </tran_glyph>
        </tran>
        <state_glyph node="8,41,14,7">
         <entry box="1,2,5,2"/>
        </state_glyph>
       </state>
       <state name="carsGreenPedWait">
        <entry>BSP_showState(&quot;carsGreenPedWait&quot;);</entry>
        <tran trig="Q_TIMEOUT" target="../../../2">
         <tran_glyph conn="8,55,3,1,23,9,-2">
          <action box="0,-2,10,2"/>
         </tran_glyph>
        </tran>
        <state_glyph node="8,49,14,7">
         <entry box="1,2,5,2"/>
        </state_glyph>
       </state>
       <state_glyph node="6,21,23,37">
        <entry box="1,2,17,2"/>
        <exit box="1,4,5,2"/>
       </state_glyph>
      </state>
      <state name="carsYellow">
       <entry brief="CARS_YELLOW">BSP_showState(&quot;carsYellow&quot;);
BSP_signalCars(CARS_YELLOW);

/* one-shot timeout in CARS_YELLOW_TOUT ticks */
QActive_armX(&amp;me-&gt;super, 0U, CARS_YELLOW_TOUT, 0U);</entry>
       <exit>QActive_disarmX(&amp;me-&gt;super, 0U);</exit>
       <tran trig="Q_TIMEOUT" target="../../../3">
        <tran_glyph conn="6,68,3,3,33">
         <action box="0,-2,8,2"/>
        </tran_glyph>
       </tran>
       <state_glyph node="6,60,23,10">
        <entry box="1,2,17,2"/>
        <exit box="1,4,5,2"/>
       </state_glyph>
      </state>
      <state_glyph node="4,14,31,58">
       <exit box="1,2,5,2"/>
      </state_glyph>
     </state>
     <state name="pedsEnabled">
      <exit brief="PEDS_DONT_WALK">BSP_signalPeds(PEDS_DONT_WALK);</exit>
      <initial target="../1">
       <initial_glyph conn="40,19,5,1,21,4,-2">
        <action box="0,-2,6,2"/>
       </initial_glyph>
      </initial>
      <state name="pedsWalk">
       <entry brief="PEDS_WALK">BSP_showState(&quot;pedsWalk&quot;);
BSP_signalPeds(PEDS_WALK);
/* one-shot timeout in PEDS_WALK_TOUT ticks */
QActive_armX(&amp;me-&gt;super, 0U, PEDS_WALK_TOUT, 0U);</entry>
       <exit>QActive_disarmX(&amp;me-&gt;super, 0U);</exit>
       <tran trig="Q_TIMEOUT" target="../../2">
        <tran_glyph conn="41,29,3,1,27,7,-2">
         <action box="0,-2,8,2"/>
        </tran_glyph>
       </tran>
       <state_glyph node="41,21,18,10">
        <entry box="1,2,15,2"/>
        <exit box="1,4,5,2"/>
       </state_glyph>
      </state>
      <state name="pedsFlash">
       <entry>BSP_showState(&quot;pedsFlash&quot;);
/* periodic timeout in PEDS_FLASH_TOUT and every PEDS_FLASH_TOUT ticks */
QActive_armX(&amp;me-&gt;super, 0U, PEDS_FLASH_TOUT, PEDS_FLASH_TOUT);
me-&gt;flashCtr = (PEDS_FLASH_NUM * 2U) + 1U;</entry>
       <exit>QActive_disarmX(&amp;me-&gt;super, 0U);</exit>
       <tran trig="Q_TIMEOUT">
        <choice>
         <guard>me-&gt;flashCtr != 0U</guard>
         <action>--me-&gt;flashCtr;</action>
         <choice>
          <guard>(me-&gt;flashCtr &amp; 1U) == 0U</guard>
          <action>BSP_signalPeds(PEDS_DONT_WALK);</action>
          <choice_glyph conn="49,52,5,-1,-5,9,16">
           <action box="-7,9,26,5"/>
          </choice_glyph>
         </choice>
         <choice>
          <guard>else</guard>
          <action>BSP_signalPeds(PEDS_BLANK);</action>
          <choice_glyph conn="49,52,4,-1,3,11">
           <action box="0,3,22,4"/>
          </choice_glyph>
         </choice>
         <choice_glyph conn="49,43,5,-1,11,9,-11">
          <action box="1,0,16,4"/>
         </choice_glyph>
        </choice>
        <choice target="../../../../2">
         <guard>else</guard>
         <choice_glyph conn="49,43,4,1,3,-14">
          <action box="-7,3,6,2"/>
         </choice_glyph>
        </choice>
        <tran_glyph conn="41,43,3,-1,8">
         <action box="0,-2,8,2"/>
        </tran_glyph>
       </tran>
       <state_glyph node="41,34,25,32">
        <entry box="1,2,5,2"/>
        <exit box="1,4,5,2"/>
       </state_glyph>
      </state>
      <state_glyph node="39,14,31,58">
       <exit box="1,2,5,2"/>
      </state_glyph>
     </state>
     <state_glyph node="2,4,70,70">
      <entry box="1,2,28,2"/>
     </state_glyph>
    </state>
    <state name="offline">
     <entry>BSP_showState(&quot;offline&quot;);
/* periodic timeout in OFF_FLASH_TOUT and every OFF_FLASH_TOUT ticks */
QActive_armX(&amp;me-&gt;super, 0U, OFF_FLASH_TOUT, OFF_FLASH_TOUT);
me-&gt;flashCtr = 0U;</entry>
     <exit>QActive_disarmX(&amp;me-&gt;super, 0U);</exit>
     <tran trig="Q_TIMEOUT">
      <action>me-&gt;flashCtr ^= 1U;</action>
      <choice>
       <guard>(me-&gt;flashCtr &amp; 1U) == 0U</guard>
       <action brief="\CARS_RED; PEDS_DONT_WALK;">BSP_signalCars(CARS_RED);
BSP_signalPeds(PEDS_DONT_WALK);</action>
       <choice_glyph conn="36,87,5,-1,29">
        <action box="1,0,23,4"/>
       </choice_glyph>
      </choice>
      <choice>
       <guard>else</guard>
       <action brief="CARS_BLANK; PEDS_BLANK;">BSP_signalCars(CARS_BLANK);
BSP_signalPeds(PEDS_BLANK);</action>
       <choice_glyph conn="36,87,4,-1,5,29">
        <action box="1,5,26,2"/>
       </choice_glyph>
      </choice>
      <tran_glyph conn="2,87,3,-1,34">
       <action box="0,-2,22,4"/>
      </tran_glyph>
     </tran>
     <tran trig="ON" target="../../1">
      <tran_glyph conn="2,84,3,2,63,-10">
       <action box="0,-2,6,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="2,76,70,19">
      <entry box="1,2,5,2"/>
      <exit box="1,4,5,2"/>
     </state_glyph>
    </state>
    <state_diagram size="76,96"/>
   </statechart>
  </class>
 </package>
 <directory name=".">
  <file name="pelican.ino">
   <text>#include &quot;qpn.h&quot;     // QP-nano framework
#include &quot;Arduino.h&quot; // Arduino API

//============================================================================
// events used in this application...
enum PelicanSignals {
    PEDS_WAITING_SIG = Q_USER_SIG, // PEDestrians-waiting button press event
    OFF_SIG,                       // OFF-button press event
    ON_SIG                         // ON-button press event
};

//============================================================================
// declare all AO classes...
$declare(AOs::Pelican)
//...

// define all AO instances and event queue buffers for them...
Pelican AO_Pelican;
static QEvt l_pelicanQSto[10]; // Event queue storage for Pelican
//...

//============================================================================
// QF_active[] array defines all active object control blocks ----------------
QActiveCB const Q_ROM QF_active[] = {
    { (QActive *)0,           (QEvt *)0,        0U                      },
    { (QActive *)&amp;AO_Pelican, l_pelicanQSto,    Q_DIM(l_pelicanQSto)    }
};

//============================================================================
// Board Support Package (BSP)
enum BSP_CarsSignal { // street signals ...
    CARS_BLANK, CARS_RED, CARS_YELLOW, CARS_GREEN
};

enum BSP_PedsSignal {
    PEDS_BLANK, PEDS_DONT_WALK, PEDS_WALK
};

// various other constants for the application...
enum {
    BSP_TICKS_PER_SEC   = 100, // number of system clock ticks in one second
    LED_L               = 13,  // the pin number of the on-board LED (L)
    CARS_GREEN_MIN_TOUT = (BSP_TICKS_PER_SEC * 8U),
    CARS_YELLOW_TOUT    = (BSP_TICKS_PER_SEC * 3U),
    PEDS_WALK_TOUT      = (BSP_TICKS_PER_SEC * 3U),
    PEDS_FLASH_TOUT     = (BSP_TICKS_PER_SEC / 5U),
    PEDS_FLASH_NUM      = (5U * 2U),
    OFF_FLASH_TOUT      = (BSP_TICKS_PER_SEC / 2U)
};

//............................................................................
void BSP_signalCars(enum BSP_CarsSignal sig) {
    switch (sig) {
        case CARS_BLANK:
            Serial.println(F(&quot;Cars: BLANK&quot;));
            break;
        case CARS_RED:
            Serial.println(F(&quot;Cars: RED&quot;));
            break;
        case CARS_YELLOW:
            Serial.println(F(&quot;Cars: YELLOW&quot;));
            break;
        case CARS_GREEN:
            Serial.println(F(&quot;Cars: GREEN&quot;));
            break;
    }
}
//............................................................................
void BSP_signalPeds(enum BSP_PedsSignal sig) {
    switch (sig) {
        case PEDS_BLANK:
            Serial.println(F(&quot;Peds: BLANK&quot;));
            break;
        case PEDS_DONT_WALK:
            Serial.println(F(&quot;Peds: DON'T WALK&quot;));
            break;
        case PEDS_WALK:
            Serial.println(F(&quot;Peds: WALK&quot;));
            break;
    }
}
//............................................................................
void BSP_showState(char const *state) {
    Serial.print(F(&quot;State-&gt;&quot;));
    Serial.println(state);
}

//............................................................................
void setup() {
    // initialize the QF-nano framework
    QF_init(Q_DIM(QF_active));

    // initialize all AOs...
    QActive_ctor(&amp;AO_Pelican.super, Q_STATE_CAST(&amp;Pelican_initial));

    // initialize the hardware used in this sketch...
    pinMode(LED_L, OUTPUT); // set the LED-L pin to output

    Serial.begin(115200);   // set the highest stanard baud rate of 115200 bps
    Serial.print(F(&quot;Start, QP-nano: &quot;));
    Serial.print(F(QP_VERSION_STR));
    Serial.println(&quot;&quot;);
}
//............................................................................
void loop() {
    QF_run(); // run the QP-nano application
}

//============================================================================
// interrupts...
ISR(TIMER2_COMPA_vect) {
    QF_tickXISR(0); // process time events for tick rate 0

    if (Serial.available() &gt; 0) {
        switch (Serial.read()) { // read the incoming byte
            case 'p':
            case 'P':
                QACTIVE_POST_ISR((QMActive *)&amp;AO_Pelican, PEDS_WAITING_SIG, 0U);
                break;
            case 'o':
            case 'O':
                QACTIVE_POST_ISR((QMActive *)&amp;AO_Pelican, ON_SIG, 0U);
                break;
            case 'f':
            case 'F':
                QACTIVE_POST_ISR((QMActive *)&amp;AO_Pelican, OFF_SIG, 0U);
                break;
        }
    }
}

//============================================================================
// QP-nano callbacks...
void QF_onStartup(void) {
    // set Timer2 in CTC mode, 1/1024 prescaler, start the timer ticking...
    TCCR2A = (1U &lt;&lt; WGM21) | (0U &lt;&lt; WGM20);
    TCCR2B = (1U &lt;&lt; CS22 ) | (1U &lt;&lt; CS21) | (1U &lt;&lt; CS20); // 1/2^10
    ASSR  &amp;= ~(1U &lt;&lt; AS2);
    TIMSK2 = (1U &lt;&lt; OCIE2A); // enable TIMER2 compare Interrupt
    TCNT2  = 0U;

    // set the output-compare register based on the desired tick frequency
    OCR2A  = (F_CPU / BSP_TICKS_PER_SEC / 1024U) - 1U;
}
//............................................................................
void QV_onIdle(void) {   // called with interrupts DISABLED
    // Put the CPU and peripherals to the low-power mode. You might
    // need to customize the clock management for your application,
    // see the datasheet for your particular AVR MCU.
    SMCR = (0 &lt;&lt; SM0) | (1 &lt;&lt; SE); // idle mode, adjust to your project
    QV_CPU_SLEEP();  // atomically go to sleep and enable interrupts
}
//............................................................................
void Q_onAssert(char const Q_ROM * const file, int line) {
    // implement the error-handling policy for your application!!!
    QF_INT_DISABLE(); // disable all interrupts
    QF_RESET();  // reset the CPU
}

//============================================================================
// define all AO classes (state machines)...
$define(AOs::Pelican)
//...
</text>
  </file>
 </directory>
</model>
