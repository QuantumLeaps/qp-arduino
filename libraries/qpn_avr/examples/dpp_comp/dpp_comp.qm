<?xml version="1.0" encoding="UTF-8"?>
<model version="4.4.0" links="0">
 <documentation>This is the Dining Philosopher Problem (DPP) example for the Arduino-UNO board. In this implemetnation, the Philosophers (Philos) are not active objects, but rather state-machine &quot;Orthogonal Components&quot; of the Table active object.

The example demonstrates:

1. One active object Table derived from QActive
2. Muliple state machine objects (Philo) &quot;Orthogonal Components&quot; derived from QHsm
3. The concept of a Board Support Pakage (BSP)</documentation>
 <framework name="qpn"/>
 <package name="AOs" stereotype="0x02">
  <class name="Philo" superclass="qpn::QHsm">
   <attribute name="tickCtr" type="uint16_t" visibility="0x00" properties="0x00"/>
   <attribute name="num" type="uint8_t" visibility="0x00" properties="0x00"/>
   <operation name="ctor" type="void" visibility="0x00" properties="0x00">
    <parameter name="num" type="uint8_t"/>
    <code>QHsm_ctor(&amp;me-&gt;super, Q_STATE_CAST(&amp;Philo_initial));
me-&gt;num = num;</code>
   </operation>
   <statechart>
    <initial target="../1">
     <action>me-&gt;tickCtr = 0U;</action>
     <initial_glyph conn="2,3,5,1,20,5,-4">
      <action box="0,-2,6,2"/>
     </initial_glyph>
    </initial>
    <state name="thinking">
     <entry>me-&gt;tickCtr = THINK_TIME;</entry>
     <exit>me-&gt;tickCtr = 0U;</exit>
     <tran trig="Q_TIMEOUT" target="../../2">
      <tran_glyph conn="2,14,3,1,20,11,-4">
       <action box="0,-2,10,2"/>
      </tran_glyph>
     </tran>
     <tran trig="EAT, DONE">
      <action>Q_ERROR(); /* these events should never arrive in this state */</action>
      <tran_glyph conn="2,17,3,-1,13">
       <action box="0,-2,14,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="2,5,16,16">
      <entry box="1,2,5,2"/>
      <exit box="1,4,6,2"/>
     </state_glyph>
    </state>
    <state name="hungry">
     <entry>QACTIVE_POST(&amp;AO_Table, HUNGRY_SIG, me-&gt;num);</entry>
     <tran trig="EAT" target="../../3">
      <tran_glyph conn="2,32,3,1,20,11,-4">
       <action box="0,-2,14,2"/>
      </tran_glyph>
     </tran>
     <tran trig="DONE">
      <action>Q_ERROR(); /* this event should never arrive in this state */</action>
      <tran_glyph conn="2,36,3,-1,14">
       <action box="0,-2,14,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="2,23,16,16">
      <entry box="1,2,5,2"/>
     </state_glyph>
    </state>
    <state name="eating">
     <entry>me-&gt;tickCtr = EAT_TIME;</entry>
     <exit>me-&gt;tickCtr = 0U;
QACTIVE_POST(&amp;AO_Table, DONE_SIG, me-&gt;num);</exit>
     <tran trig="Q_TIMEOUT" target="../../1">
      <tran_glyph conn="2,51,3,1,22,-41,-6">
       <action box="0,-2,6,2"/>
      </tran_glyph>
     </tran>
     <tran trig="EAT, DONE">
      <action>Q_ERROR(); /* these events should never arrive in this state */</action>
      <tran_glyph conn="2,55,3,-1,13">
       <action box="0,-2,14,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="2,41,16,18">
      <entry box="1,2,5,2"/>
      <exit box="1,4,5,2"/>
     </state_glyph>
    </state>
    <state_diagram size="28,62"/>
   </statechart>
  </class>
  <class name="Table" superclass="qpn::QActive">
   <attribute name="philo_pool[N_PHILO]" type="Philo" visibility="0x02" properties="0x00"/>
   <attribute name="fork[N_PHILO]" type="uint8_t" visibility="0x02" properties="0x00"/>
   <attribute name="isHungry[N_PHILO]" type="uint8_t" visibility="0x02" properties="0x00"/>
   <statechart>
    <initial target="../1/2">
     <action>uint8_t n;
for (n = 0U; n &lt; N_PHILO; ++n) {
    QHSM_INIT(&amp;me-&gt;philo_pool[n].super);
    me-&gt;fork[n] = FREE;
    me-&gt;isHungry[n] = 0U;
    BSP_displayPhilStat(n, &quot;thinking&quot;);
}</action>
     <initial_glyph conn="4,4,5,1,42,24,-8">
      <action box="0,-2,6,2"/>
     </initial_glyph>
    </initial>
    <state name="active">
     <tran trig="EAT">
      <action>Q_ERROR();</action>
      <tran_glyph conn="2,16,3,-1,14">
       <action box="0,-2,13,5"/>
      </tran_glyph>
     </tran>
     <tran trig="TICK">
      <action>uint8_t n;
for (n = 0U; n &lt; N_PHILO; ++n) { // for all &quot;Philo&quot; components...
    Philo *philo = &amp;me-&gt;philo_pool[n];
    if (philo-&gt;tickCtr != 0U) { // is the &quot;Philo&quot; tick counter runnning?
        if (--philo-&gt;tickCtr == 0U) { // is the &quot;Philo&quot; tick expiring?
            // synchronously dispatch to component
            Q_SIG(philo) = Q_TIMEOUT_SIG;
            QHSM_DISPATCH(&amp;philo-&gt;super);
        }
    }
}</action>
      <tran_glyph conn="2,22,3,-1,14">
       <action box="0,-2,13,3"/>
      </tran_glyph>
     </tran>
     <state name="serving">
      <entry brief="give pending permitions to eat">uint8_t n;
for (n = 0U; n &lt; N_PHILO; ++n) { /* give permissions to eat... */
    if ((me-&gt;isHungry[n] != 0U)
        &amp;&amp; (me-&gt;fork[LEFT(n)] == FREE)
        &amp;&amp; (me-&gt;fork[n] == FREE))
    {
        me-&gt;fork[LEFT(n)] = USED;
        me-&gt;fork[n] = USED;

        /* synchronously dispatch to philo_pool[n] */
        Q_SIG(&amp;me-&gt;philo_pool[n]) = EAT_SIG;
        Q_PAR(&amp;me-&gt;philo_pool[n]) = n;
        QHSM_DISPATCH(&amp;me-&gt;philo_pool[n].super);

        me-&gt;isHungry[n] = 0U;
        BSP_displayPhilStat(n, &quot;eating  &quot;);
    }
}</entry>
      <tran trig="HUNGRY">
       <action>uint8_t n, m;

n = (uint8_t)Q_PAR(me);

BSP_displayPhilStat(n, &quot;hungry  &quot;);

/* philo ID must be in range and he must be not hungry */
Q_ASSERT((n &lt; N_PHILO) &amp;&amp; (me-&gt;isHungry[n] == 0U));

m = LEFT(n);</action>
       <choice>
        <guard brief="both-free">(me-&gt;fork[m] == FREE) &amp;&amp; (me-&gt;fork[n] == FREE)</guard>
        <action>me-&gt;fork[m] = USED;
me-&gt;fork[n] = USED;

/* synchronously dispatch to philo_pool[n] */
Q_SIG(&amp;me-&gt;philo_pool[n]) = EAT_SIG;
Q_PAR(&amp;me-&gt;philo_pool[n]) = n;
QHSM_DISPATCH(&amp;me-&gt;philo_pool[n].super);

BSP_displayPhilStat(n, &quot;eating  &quot;);</action>
        <choice_glyph conn="19,33,5,-1,10">
         <action box="1,0,10,2"/>
        </choice_glyph>
       </choice>
       <choice>
        <guard>else</guard>
        <action>me-&gt;isHungry[n] = 1U;</action>
        <choice_glyph conn="19,33,4,-1,5,10">
         <action box="1,5,6,2"/>
        </choice_glyph>
       </choice>
       <tran_glyph conn="4,33,3,-1,15">
        <action box="0,-2,8,2"/>
       </tran_glyph>
      </tran>
      <tran trig="DONE">
       <action>uint8_t n, m;

n = (uint8_t)Q_PAR(me);

/* phil ID must be in range and he must be not hungry */
Q_ASSERT((n &lt; N_PHILO) &amp;&amp; (me-&gt;isHungry[n] == 0U));

BSP_displayPhilStat(n, &quot;thinking&quot;);
m = LEFT(n);
/* both forks of Philo[n] must be used */
Q_ASSERT((me-&gt;fork[n] == USED) &amp;&amp; (me-&gt;fork[m] == USED));

me-&gt;fork[m] = FREE;
me-&gt;fork[n] = FREE;
m = RIGHT(n); /* check the right neighbor */

if ((me-&gt;isHungry[m] != 0U) &amp;&amp; (me-&gt;fork[m] == FREE)) {
    me-&gt;fork[n] = USED;
    me-&gt;fork[m] = USED;
    me-&gt;isHungry[m] = 0U;

    /* synchronously dispatch to philo_pool[m] */
    Q_SIG(&amp;me-&gt;philo_pool[m]) = EAT_SIG;
    Q_PAR(&amp;me-&gt;philo_pool[m]) = m;
    QHSM_DISPATCH(&amp;me-&gt;philo_pool[m].super);

    BSP_displayPhilStat(m, &quot;eating  &quot;);
}
m = LEFT(n); /* check the left neighbor */
n = LEFT(m); /* left fork of the left neighbor */
if ((me-&gt;isHungry[m] != 0U) &amp;&amp; (me-&gt;fork[n] == FREE)) {
    me-&gt;fork[m] = USED;
    me-&gt;fork[n] = USED;
    me-&gt;isHungry[m] = 0U;

    /* synchronously dispatch to philo_pool[m] */
    Q_SIG(&amp;me-&gt;philo_pool[m]) = EAT_SIG;
    Q_PAR(&amp;me-&gt;philo_pool[m]) = m;
    QHSM_DISPATCH(&amp;me-&gt;philo_pool[m].super);

    BSP_displayPhilStat(m, &quot;eating  &quot;);
}</action>
       <tran_glyph conn="4,41,3,-1,15">
        <action box="0,-2,10,2"/>
       </tran_glyph>
      </tran>
      <tran trig="EAT">
       <action>Q_ERROR();</action>
       <tran_glyph conn="4,44,3,-1,15">
        <action box="0,-2,12,5"/>
       </tran_glyph>
      </tran>
      <tran trig="PAUSE" target="../../3">
       <tran_glyph conn="4,48,3,1,36,10,-2">
        <action box="0,-2,7,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="4,26,34,24">
       <entry box="1,2,28,3"/>
      </state_glyph>
     </state>
     <state name="paused">
      <entry>BSP_displayPaused(1U);</entry>
      <exit>BSP_displayPaused(0U);</exit>
      <tran trig="SERVE" target="../../2">
       <tran_glyph conn="4,68,3,1,38,-24,-4">
        <action box="0,-2,7,2"/>
       </tran_glyph>
      </tran>
      <tran trig="HUNGRY">
       <action>uint8_t n = (uint8_t)Q_PAR(me);

BSP_displayPhilStat(n, &quot;hungry  &quot;);

/* philo ID must be in range and he must be not hungry */
Q_ASSERT((n &lt; N_PHILO) &amp;&amp; (me-&gt;isHungry[n] == 0U));
me-&gt;isHungry[n] = 1U;</action>
       <tran_glyph conn="4,71,3,-1,15">
        <action box="0,-2,10,2"/>
       </tran_glyph>
      </tran>
      <tran trig="DONE">
       <action>uint8_t n, m;

n = (uint8_t)Q_PAR(me);
/* philo ID must be in range and he must be not hungry */
Q_ASSERT((n &lt; N_PHILO) &amp;&amp; (me-&gt;isHungry[n] == 0U));

BSP_displayPhilStat(n, &quot;thinking&quot;);
m = LEFT(n);
/* both forks of Phil[n] must be used */
Q_ASSERT((me-&gt;fork[n] == USED) &amp;&amp; (me-&gt;fork[m] == USED));

me-&gt;fork[m] = FREE;
me-&gt;fork[n] = FREE;</action>
       <tran_glyph conn="4,74,3,-1,15">
        <action box="0,-2,6,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="4,54,34,22">
       <entry box="1,2,19,5"/>
       <exit box="1,7,18,5"/>
      </state_glyph>
     </state>
     <state_glyph node="2,6,42,72"/>
    </state>
    <state_diagram size="50,80"/>
   </statechart>
  </class>
  <operation name="Table_ctor" type="void" visibility="0x00" properties="0x01">
   <code>uint8_t n;
Table *me = &amp;AO_Table;

QActive_ctor(&amp;me-&gt;super, Q_STATE_CAST(&amp;Table_initial));
for (n = 0U; n &lt; N_PHILO; ++n) {
    Philo_ctor(&amp;me-&gt;philo_pool[n], n);
    me-&gt;fork[n] = FREE;
    me-&gt;isHungry[n] = 0U;
}</code>
  </operation>
 </package>
 <directory name=".">
  <file name="dpp_comp.ino">
   <text>#include &quot;qpn.h&quot;     // QP-nano framework
#include &quot;Arduino.h&quot; // Arduino API

Q_DEFINE_THIS_MODULE(&quot;dpp&quot;)

//============================================================================
enum DPPSignals {
    TICK_SIG = Q_USER_SIG, // posted by system clock tick ISR to Table
    EAT_SIG,              // posted by Table to let a philosopher eat
    DONE_SIG,             // posted by Philosopher when done eating
    PAUSE_SIG,            // posted by BSP to pause the application
    SERVE_SIG,            // posted by BSP to pause the application
    HUNGRY_SIG,           // posted to Table from hungry Philo
    MAX_SIG               // the last signal
};

enum {
    N_PHILO = 10 // number of Philosophers
};

//============================================================================
// declare the Philo components...
$declare(AOs::Philo)

// declare all AO classes...
$declare(AOs::Table)
$declare(AOs::Table_ctor)
//...

// define all AO instances and event queue buffers for them...
Table AO_Table;
static QEvt l_tableQueue[3 + N_PHILO];
//...

//============================================================================
// QF_active[] array defines all active object control blocks ----------------
QActiveCB const Q_ROM QF_active[] = {
    { (QActive *)0,            (QEvt *)0,        0U                      },
    { (QActive *)&amp;AO_Table,    l_tableQueue,     Q_DIM(l_tableQueue)     }
};

//============================================================================
// Board Support Package

// various other constants for the application...
enum {
    BSP_TICKS_PER_SEC = 100, // number of system clock ticks in one second
    LED_L             = 13,  // the pin number of the on-board LED (L)
    PHILO_0_PRIO      = 1,   // priority of the first Philo AO
    THINK_TIME        = 3*BSP_TICKS_PER_SEC, // time for thinking
    EAT_TIME          = 2*BSP_TICKS_PER_SEC  // time for eating
};

//............................................................................
void BSP_displayPhilStat(uint8_t n, char_t const *stat) {
    if (stat[0] == 'e') {
        digitalWrite(LED_L, HIGH);
    }
    else {
        digitalWrite(LED_L, LOW);
    }

    Serial.print(F(&quot;Philo[&quot;));
    Serial.print(n, DEC);
    Serial.print(F(&quot;] &quot;));
    Serial.println(stat);
}
//............................................................................
void BSP_displayPaused(uint8_t paused) {
    if (paused) {
        Serial.println(F(&quot;Paused ON&quot;));
    }
    else {
        Serial.println(F(&quot;Paused OFF&quot;));
    }
}

//............................................................................
void setup() {
    // initialize the QF-nano framework
    QF_init(Q_DIM(QF_active));

    // instantiate all active objects...
    Table_ctor();

    // initialize the hardware used in this sketch...
    pinMode(LED_L, OUTPUT); // set the LED-L pin to output

    Serial.begin(115200);   // set the highest stanard baud rate of 115200 bps
    Serial.print(F(&quot;QP-nano: &quot;));
    Serial.print(F(QP_VERSION_STR));
    Serial.println(F(&quot;&quot;));
}

//............................................................................
void loop() {
    QF_run(); // run the QP-nano application
}

//============================================================================
// interrupts
ISR(TIMER2_COMPA_vect) {
    QF_tickXISR(0); // process time events for tick rate 0

    // post the TICK_SIG event to the Table AO every system clock tick
    QACTIVE_POST_X_ISR(&amp;AO_Table,
                       3U, // leave a margin of 3 entries in the queue
                       TICK_SIG, 0U);

    if (Serial.available() &gt; 0) {
        switch (Serial.read()) { // read the incoming byte
            case 'p':
            case 'P':
                QACTIVE_POST_ISR(&amp;AO_Table, PAUSE_SIG, 0U);
                break;
            case 's':
            case 'S':
                QACTIVE_POST_ISR(&amp;AO_Table, SERVE_SIG, 0U);
                break;
        }
    }
}

//============================================================================
// QF callbacks...
void QF_onStartup(void) {
    // set Timer2 in CTC mode, 1/1024 prescaler, start the timer ticking...
    TCCR2A = (1U &lt;&lt; WGM21) | (0U &lt;&lt; WGM20);
    TCCR2B = (1U &lt;&lt; CS22 ) | (1U &lt;&lt; CS21) | (1U &lt;&lt; CS20); // 1/2^10
    ASSR  &amp;= ~(1U &lt;&lt; AS2);
    TIMSK2 = (1U &lt;&lt; OCIE2A); // enable TIMER2 compare Interrupt
    TCNT2  = 0U;

    // set the output-compare register based on the desired tick frequency
    OCR2A  = (F_CPU / BSP_TICKS_PER_SEC / 1024U) - 1U;
}
//............................................................................
void QV_onIdle(void) {   // called with interrupts DISABLED
    // Put the CPU and peripherals to the low-power mode. You might
    // need to customize the clock management for your application,
    // see the datasheet for your particular AVR MCU.
#ifdef NDEBUG
    SMCR = (0 &lt;&lt; SM0) | (1 &lt;&lt; SE); // idle mode, adjust to your project
    QV_CPU_SLEEP();  // atomically go to sleep and enable interrupts
#else
    QF_INT_ENABLE();
#endif
}
//............................................................................
void Q_onAssert(char const Q_ROM * const module, int line) {
    // implement the error-handling policy for your application!!!
    Serial.print(F(&quot;ASSERT:&quot;));
    Serial.print(reinterpret_cast&lt;const __FlashStringHelper *&gt;(module));
    Serial.println(line, DEC);
    delay(500);
    for (;;) {}
    QF_INT_DISABLE(); // disable all interrupts
    QF_RESET();  // reset the CPU
}

//============================================================================
// define the components...
$define(AOs::Philo)

//============================================================================
// define all AO classes...
static inline uint8_t RIGHT(uint8_t n) {
    return (n + (N_PHILO - 1)) % N_PHILO;
}
static inline uint8_t LEFT(uint8_t n) {
    return (n + 1) % N_PHILO;
}
enum {
    FREE = 0,
    USED = 1
};

$define(AOs::Table)
$define(AOs::Table_ctor)
//...

</text>
  </file>
 </directory>
</model>
