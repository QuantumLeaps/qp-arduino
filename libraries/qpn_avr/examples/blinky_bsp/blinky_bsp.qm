<?xml version="1.0" encoding="UTF-8"?>
<model version="5.1.3" links="0">
 <documentation>This is a redesign of the original Blinky example for the Arduino-UNO board, which blinks the on-board LED (L) once per second.

This example demonstrates:
1. A simple state machine.
2. One active object class &quot;Blinky&quot; (inside the package &quot;AOs&quot;).
3. Extended with a BSP (Board Support Packet, bsp_ino.ino).
4. in the BSP conditional compilation for debug information.</documentation>
 <framework name="qpn"/>
 <package name="AOs" stereotype="0x02">
  <class name="Blinky" superclass="qpn::QActive">
   <statechart properties="0x01">
    <initial target="../1">
     <action>QActive_armX((QActive *)me, 0U,
  BSP_TICKS_PER_SEC/2U, BSP_TICKS_PER_SEC/2U);</action>
     <initial_glyph conn="2,3,5,1,24,4,-2">
      <action box="0,-2,6,2"/>
     </initial_glyph>
    </initial>
    <state name="off">
     <entry brief="LED off">BSP_onboardLedOff ();</entry>
     <tran trig="Q_TIMEOUT" target="../../2">
      <tran_glyph conn="2,13,3,1,26,9,-4">
       <action box="0,-2,10,3"/>
      </tran_glyph>
     </tran>
     <state_glyph node="2,5,22,11">
      <entry box="1,2,8,3"/>
     </state_glyph>
    </state>
    <state name="on">
     <entry brief="LED on">BSP_onboardLedOn ();</entry>
     <tran trig="Q_BUTTON_PRESSED" target="../../1">
      <tran_glyph conn="2,26,3,1,28,-16,-6">
       <action box="0,-2,17,3"/>
      </tran_glyph>
     </tran>
     <tran trig="Q_TIMEOUT" target="../../1">
      <tran_glyph conn="2,30,3,1,32,-20,-10">
       <action box="0,-2,10,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="2,18,22,16">
      <entry box="1,2,8,3"/>
     </state_glyph>
    </state>
    <state_diagram size="37,37"/>
   </statechart>
  </class>
 </package>
 <directory name=".">
  <file name="blinky_bsp.ino">
   <text>#include &quot;qpn.h&quot;       // QP-nano framework
#include &quot;blinky.hpp&quot;  // Blinky interface
#include &quot;bsp.hpp&quot;     // BSP for this application

//============================================================================
// declare all AO classes...
$declare${AOs::Blinky}
//...

// AO instances and event queue buffers for them...
struct Blinky AO_Blinky;

//============================================================================
void Blinky_ctor(void) {
    Blinky * const me = &amp;AO_Blinky;
    QActive_ctor(&amp;me-&gt;super, Q_STATE_CAST(&amp;Blinky_initial));
}

//============================================================================
// define all AO classes (state machine)...
$define${AOs::Blinky}
//...
</text>
  </file>
  <file name="blinky.hpp">
   <text>#ifndef BLINKY_HPP
#define BLINKY_HPP

enum BlinkySignals {
    Q_BUTTON_PRESSED_SIG = Q_USER_SIG,
    /* add more signals here... */
    MAX_SIG  /* the last signal */
};

void Blinky_ctor(void);
extern struct Blinky AO_Blinky;

#endif // BLINKY_HPP
</text>
  </file>
  <file name="bsp.hpp">
   <text>#ifndef BSP_HPP
#define BSP_HPP

enum {
    BSP_TICKS_PER_SEC = 100
};

void BSP_initSetup(void);
void BSP_initTick(void);
void BSP_onboardLedOff(void);
void BSP_onboardLedOn(void);

#endif // BSP_HPP
</text>
  </file>
  <file name="bsp_uno.cpp">
   <text>/* This file has been prepared for Doxygen **************************/

/*! \file bsp_uno.ino *************************************************
*
* \brief Arduino Board Support Package for the Arduino-UNO
*
* Copyright (C) 2021 W.Nijs (ALF4all)
*
* This program is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
*
* \author   W.Nijs.
* \date     04/01/2021
* \version  1.0 04/01/2021, initial revision, W.Nijs
*
*********************************************************************/
/*****************************************************************//**
* Include section
*  Add all #includes here.
*********************************************************************/
#include &quot;qpn.h&quot;       // QP-nano framework
#include &quot;blinky.hpp&quot;  // Blinky interface
#include &quot;bsp.hpp&quot;     // BSP for this application
#include &quot;Arduino.h&quot;  // Main include file for the Arduino SDK

//#include &lt;avr/interrupt.h&gt;

/*****************************************************************//**
* Define section
*  Add all #defines here.
*********************************************************************/
#define DEBUG
#define BUTTON          2 // Can only be pin 2 or 3 on the Uno
#define ONBOARDLED     13

//unsigned long previousMillis = 0;


/*****************************************************************//**
* ISR BSP_buttonPressed()
*********************************************************************/
void ISR_buttonPressed() {
  QACTIVE_POST_ISR((QActive *)&amp;AO_Blinky, Q_BUTTON_PRESSED_SIG, 0U);
};

//============================================================================
static QEvt l_blinkyQSto[10]; // Event queue storage for Blinky
//...

//============================================================================
// QF_active[] array defines all active object control blocks ----------------
QActiveCB const Q_ROM QF_active[] = {
    { (QActive *)0,           (QEvt *)0,        0U                  },
    { (QActive *)&amp;AO_Blinky,  l_blinkyQSto,     Q_DIM(l_blinkyQSto) }
};

//............................................................................
void setup() {
    // initialize the QF-nano framework
    QF_init(Q_DIM(QF_active));
    BSP_initSetup();

    // initialize all AOs...
    Blinky_ctor();
}

//............................................................................
void loop() {
    QF_run(); // run the QF-nano framework
}

/*****************************************************************//**
* BSP_initSetup()
*********************************************************************/
void BSP_initSetup(void) {
  // initialize the hardware used in this sketch...
  pinMode(BUTTON, INPUT_PULLUP); // set the BUTTON pin to input
  attachInterrupt(digitalPinToInterrupt(2),ISR_buttonPressed,FALLING);
  pinMode(ONBOARDLED, OUTPUT);   // set the ONBOARDLED pin to output
#if defined(DEBUG)
  Serial.begin(115200);
  Serial.println(&quot;--- Blinky by ALF4all ---&quot;);
  Serial.println(&quot;-------------------------&quot;);
#endif
};

/*****************************************************************//**
* BSP_initTick()
*********************************************************************/
void BSP_initTick(void) {
  // set Timer2 in CTC mode, 1/1024 prescaler, start the timer ticking...
  TCCR2A = (1U &lt;&lt; WGM21) | (0U &lt;&lt; WGM20);
  TCCR2B = (1U &lt;&lt; CS22 ) | (1U &lt;&lt; CS21) | (1U &lt;&lt; CS20); // 1/2^10
  ASSR  &amp;= ~(1U &lt;&lt; AS2);
  TIMSK2 = (1U &lt;&lt; OCIE2A); // enable TIMER2 compare Interrupt
  TCNT2  = 0U;

  // set the output-compare register based on the desired tick frequency
  OCR2A  = (F_CPU / BSP_TICKS_PER_SEC / 1024U) - 1U;
};

/*****************************************************************//**
* BSP_onboardLedOff()
*********************************************************************/
void BSP_onboardLedOff(void) {
  digitalWrite(ONBOARDLED, LOW);
#if defined(DEBUG)
  Serial.println(&quot;LED off&quot;);
#endif
};

/*****************************************************************//**
* BSP_onboardLedOn()
*********************************************************************/
void BSP_onboardLedOn(void) {
  digitalWrite(ONBOARDLED, HIGH);
#if defined(DEBUG)
  Serial.println(&quot;LED on&quot;);
#endif
};

/*****************************************************************//**
* ISR TIMER2 COMPA
*********************************************************************/
ISR(TIMER2_COMPA_vect) {
  QF_tickXISR(0); // process time events for tick rate 0
};


//============================================================================
// QF callbacks...
void QF_onStartup(void) {
    BSP_initTick();
}
//............................................................................
void QV_onIdle(void) {   // called with interrupts DISABLED
    // Put the CPU and peripherals to the low-power mode. You might
    // need to customize the clock management for your application,
    // see the datasheet for your particular AVR MCU.
    SMCR = (0 &lt;&lt; SM0) | (1 &lt;&lt; SE); // idle mode, adjust to your project
    QV_CPU_SLEEP();  // atomically go to sleep and enable interrupts
}
//............................................................................
Q_NORETURN Q_onAssert(char const Q_ROM * const module, int location) {
    // implement the error-handling policy for your application!!!
    (void)module;
    (void)location;
    QF_INT_DISABLE(); // disable all interrupts
    QF_RESET();  // reset the CPU
    for (;;) {
    }
}


</text>
  </file>
 </directory>
</model>
