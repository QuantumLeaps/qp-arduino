<?xml version="1.0" encoding="UTF-8"?>
<model version="5.1.3" links="0">
 <documentation>This is the simple Blinky example for the Arduino DUE board. The example demonstrates:

1. One active object class &quot;Blinky&quot; (inside the package &quot;AOs&quot;)
2. A simple state machine

----
# Board configuration:

The external LED needs to be connected between the pins GND and 13, with the short LEG leg at the GND pin.

----
# More info

This example places all the code inside the blinky.ino &quot;sketch&quot;. The Blinky state machine calls the Arduino services directly (e.g., digitalWrite() to turn the LED on and off).

This structure of the code is approprate only for very small applications. More advanced projects should use the concept of the Board Support Package (BSP) to insulate the state machines from interacting directly with the hardware. (See also blinky_bsp and other *_bsp examples.)</documentation>
 <framework name="qpcpp"/>
 <package name="AOs" stereotype="0x02">
  <class name="Blinky" superclass="qpcpp::QActive">
   <attribute name="m_timeEvt" type="QP::QTimeEvt" visibility="0x02" properties="0x00"/>
   <attribute name="instance" type="Blinky" visibility="0x00" properties="0x01">
    <documentation>static class instance (Singleton)</documentation>
   </attribute>
   <operation name="Blinky" type="" visibility="0x00" properties="0x00">
    <code>: QActive(Q_STATE_CAST(&amp;Blinky::initial)),
    m_timeEvt(this, TIMEOUT_SIG, 0U)</code>
   </operation>
   <statechart properties="0x00">
    <initial target="../1">
     <action>m_timeEvt.armX(TICKS_PER_SEC/2, TICKS_PER_SEC/2);
(void)e; // unused parameter</action>
     <initial_glyph conn="2,2,5,1,20,8,-4">
      <action box="0,-2,32,6"/>
     </initial_glyph>
    </initial>
    <state name="off">
     <entry>digitalWrite(LED_BUILTIN, LOW); // turn the LED off</entry>
     <tran trig="TIMEOUT" target="../../2">
      <tran_glyph conn="2,16,3,1,18,8,-2">
       <action box="0,-2,8,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="2,8,16,10">
      <entry box="1,2,12,4"/>
     </state_glyph>
    </state>
    <state name="on">
     <entry>digitalWrite(LED_BUILTIN, HIGH); // turn the LED on</entry>
     <tran trig="TIMEOUT" target="../../1">
      <tran_glyph conn="2,30,3,1,20,-17,-4">
       <action box="0,-2,8,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="2,22,16,10">
      <entry box="1,2,12,4"/>
     </state_glyph>
    </state>
    <state_diagram size="34,34"/>
   </statechart>
  </class>
  <attribute name="AO_Blinky" type="QP::QActive * const" visibility="0x00" properties="0x00">
   <documentation>the opaque pointer to the Blinky AO</documentation>
   <code>= &amp;Blinky::instance;</code>
  </attribute>
 </package>
 <directory name=".">
  <file name="blinky.ino">
   <text>#include &quot;qpcpp.hpp&quot;  // QP-C++ framework

using namespace QP;

enum BlinkySignals {
    TIMEOUT_SIG = Q_USER_SIG,
    MAX_SIG
};

enum {
    TICKS_PER_SEC = 100 // number of system clock ticks per second
};

//============================================================================
// genearate declarations of all opaque AO pointers
$declare${AOs::AO_Blinky}
//...

//............................................................................
void setup() {
    QF::init(); // initialize the framework

    // initialize the hardware used in this sketch...
    // NOTE: interrupts are configured and started later in QF::onStartup()
    pinMode(LED_BUILTIN, OUTPUT);

    // statically allocate event queue buffer for the Blinky AO
    static QEvt const *blinky_queueSto[10];
    AO_Blinky-&gt;start(1U, // priority
                     blinky_queueSto, Q_DIM(blinky_queueSto),
                     (void *)0, 0U); // no stack
}

//............................................................................
void loop() {
    QF::run(); // run the QF/C++ framework
}

//============================================================================
// QF callbacks...

// ATSAM3X timer used for the system clock tick
// NOTE: re-define the macros to use a different timer/channel
#define TIMER           TC1
#define TIMER_CLCK_HZ   650000
#define TIMER_CHANNEL   0
#define TIMER_IRQn      TC3_IRQn
#define TIMER_HANDLER   TC3_Handler

// interrupts.................................................................
void TIMER_HANDLER(void) {
    TC_GetStatus(TIMER, TIMER_CHANNEL);  // clear the interrupt source
    QF::TICK_X(0, (void *)0); // process time events for tick rate 0
}
//............................................................................
void QF::onStartup(void) {
    // configure the timer-counter channel........
    pmc_set_writeprotect(false);   // disable write protection
    pmc_enable_periph_clk(TIMER_IRQn); // enable peripheral clock
    TC_Configure(TIMER, TIMER_CHANNEL,
                 TC_CMR_WAVE           // WAVE mode
                 | TC_CMR_WAVSEL_UP_RC // count-up with trigger on RC compare
                 | TC_CMR_TCCLKS_TIMER_CLOCK4);  // internal Clock4
    TC_SetRC(TIMER, TIMER_CHANNEL,
             TIMER_CLCK_HZ / TICKS_PER_SEC); // set the RC compare value
    TC_Start(TIMER, TIMER_CHANNEL);
    // enable interrrupt for RC compare
    TIMER-&gt;TC_CHANNEL[TIMER_CHANNEL].TC_IER = TC_IER_CPCS;
    TIMER-&gt;TC_CHANNEL[TIMER_CHANNEL].TC_IDR = ~TC_IER_CPCS;
    pmc_set_writeprotect(true); // enable write protection

    // explicitly set the NVIC priorities for all kernel AWARE interrupts
    NVIC_SetPriority(TIMER_IRQn,  QF_AWARE_ISR_CMSIS_PRI);
    // ...

    // enable the interrupt in the NVIC
    NVIC_EnableIRQ(TIMER_IRQn);
    // ...
}
//............................................................................
void QV::onIdle(void) { // called with interrupts DISABLED
#ifdef NDEBUG
    // Put the CPU and peripherals to the low-power mode. You might
    // need to customize the clock management for your application,
    // see the datasheet for your particular MCU.
    QV_CPU_SLEEP();  // atomically go to sleep and enable interrupts
#else
    QF_INT_ENABLE(); // simply re-enable interrupts
#endif
}
//............................................................................
extern &quot;C&quot;  Q_NORETURN Q_onAssert(char const * const module, int location) {
    //
    // NOTE: add here your application-specific error handling
    //
    (void)module;
    (void)location;

    QF_INT_DISABLE(); // disable all interrupts
    digitalWrite(LED_BUILTIN, HIGH); // turn the LED on
    for (;;) { // sit in an endless loop for now
    }
}

//============================================================================
// generate declarations and definitions of all AO classes (state machines)...
$declare${AOs::Blinky}
$define${AOs::Blinky}
//...

//============================================================================
// generate definitions of all AO opaque pointers...
$define${AOs::AO_Blinky}
//...
</text>
  </file>
 </directory>
</model>
