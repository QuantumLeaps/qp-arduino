<?xml version="1.0" encoding="UTF-8"?>
<model version="4.5.1" links="0">
 <framework name="qpcpp"/>
 <package name="AOs" stereotype="0x02">
  <class name="Blinky" superclass="qpcpp::QActive">
   <attribute name="m_timeEvt" type="QP::QTimeEvt" visibility="0x02" properties="0x00"/>
   <operation name="Blinky" type="" visibility="0x00" properties="0x00">
    <code>: QActive(Q_STATE_CAST(&amp;Blinky::initial)),
    m_timeEvt(this, TIMEOUT_SIG, 0U)</code>
   </operation>
   <statechart properties="0x00">
    <initial target="../1">
     <action>m_timeEvt.armX(BSP_TICKS_PER_SEC/2, BSP_TICKS_PER_SEC/2);
(void)e; // unused parameter</action>
     <initial_glyph conn="2,2,5,1,20,8,-4">
      <action box="0,-2,32,6"/>
     </initial_glyph>
    </initial>
    <state name="off">
     <entry>BSP_ledOff();</entry>
     <tran trig="TIMEOUT" target="../../2">
      <tran_glyph conn="2,16,3,1,18,8,-2">
       <action box="0,-2,8,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="2,8,16,10">
      <entry box="1,2,12,4"/>
     </state_glyph>
    </state>
    <state name="on">
     <entry>BSP_ledOn();</entry>
     <tran trig="TIMEOUT" target="../../1">
      <tran_glyph conn="2,30,3,1,20,-17,-4">
       <action box="0,-2,8,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="2,22,16,10">
      <entry box="1,2,12,4"/>
     </state_glyph>
    </state>
    <state_diagram size="34,34"/>
   </statechart>
  </class>
 </package>
 <directory name=".">
  <file name="blinky.ino">
   <text>#include &quot;qpcpp.h&quot;   // QP-C++ framework
#include &quot;Arduino.h&quot; // Arduino API

using namespace QP;

enum BlinkySignals {
    TIMEOUT_SIG = Q_USER_SIG,
    MAX_SIG
};

enum {
    BSP_TICKS_PER_SEC = 100,
};

void BSP_ledOff(void) {
    digitalWrite(LED_BUILTIN, LOW);
}
void BSP_ledOn(void) {
    digitalWrite(LED_BUILTIN, HIGH);
}

//============================================================================
// declare all AO classes...
$declare(AOs::Blinky)
//...

static Blinky l_blinky;
QActive * const AO_Blinky = &amp;l_blinky;

//............................................................................
void setup() {
    QF::init(); // initialize the framework

    // initialize the hardware used in this sketch...
    // NOTE: interrupts are configured and started later in QF::onStartup()
    pinMode(LED_BUILTIN, OUTPUT);

    // statically allocate event queue buffer for the Blinky AO
    static QEvt const *blinky_queueSto[10];
    AO_Blinky-&gt;start(1U, // priority
                     blinky_queueSto, Q_DIM(blinky_queueSto),
                     (void *)0, 0U); // no stack
}

//............................................................................
void loop() {
    QF::run(); // run the QF/C++ framework
}

//============================================================================
// QF callbacks...

// ATSAM3X timer used for the system clock tick
// NOTE: re-define the macros to use a different timer/channel
#define TIMER           TC1
#define TIMER_CLCK_HZ   650000
#define TIMER_CHANNEL   0
#define TIMER_IRQn      TC3_IRQn
#define TIMER_HANDLER   TC3_Handler

// interrupts.................................................................
void TIMER_HANDLER(void) {
    TC_GetStatus(TIMER, TIMER_CHANNEL);  // clear the interrupt source
    QF::TICK_X(0, (void *)0); // process time events for tick rate 0
}
//............................................................................
void QF::onStartup(void) {
    // configure the timer-counter channel........
    pmc_set_writeprotect(false);   // disable write protection
    pmc_enable_periph_clk(TIMER_IRQn); // enable peripheral clock
    TC_Configure(TIMER, TIMER_CHANNEL,
                 TC_CMR_WAVE           // WAVE mode
                 | TC_CMR_WAVSEL_UP_RC // count-up with trigger on RC compare
                 | TC_CMR_TCCLKS_TIMER_CLOCK4);  // internal Clock4
    TC_SetRC(TIMER, TIMER_CHANNEL,
             TIMER_CLCK_HZ / BSP_TICKS_PER_SEC); // set the RC compare value
    TC_Start(TIMER, TIMER_CHANNEL);
    // enable interrrupt for RC compare
    TIMER-&gt;TC_CHANNEL[TIMER_CHANNEL].TC_IER = TC_IER_CPCS;
    TIMER-&gt;TC_CHANNEL[TIMER_CHANNEL].TC_IDR = ~TC_IER_CPCS;
    pmc_set_writeprotect(true); // enable write protection

    // explicitly set the NVIC priorities for all kernel AWARE interrupts
    NVIC_SetPriority(TIMER_IRQn,  QF_AWARE_ISR_CMSIS_PRI);
    // ...

    // enable the interrupt in the NVIC
    NVIC_EnableIRQ(TIMER_IRQn);
    // ...
}
//............................................................................
void QV::onIdle(void) { // called with interrupts DISABLED
#ifdef NDEBUG
    // Put the CPU and peripherals to the low-power mode. You might
    // need to customize the clock management for your application,
    // see the datasheet for your particular MCU.
    QV_CPU_SLEEP();  // atomically go to sleep and enable interrupts
#else
    QF_INT_ENABLE(); // simply re-enable interrupts
#endif
}
//............................................................................
extern &quot;C&quot; void Q_onAssert(char const * const module, int loc) {
    // implement the error-handling policy for your application!!!
    QF_INT_DISABLE(); // disable all interrupts
    BSP_ledOn();
    for (;;) { // sit in an endless loop for now
    }
}

//============================================================================
// define all AO classes (state machine)...
$define(AOs::Blinky)
//...
</text>
  </file>
 </directory>
</model>
